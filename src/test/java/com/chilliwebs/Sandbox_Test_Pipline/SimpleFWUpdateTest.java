package com.chilliwebs.Sandbox_Test_Pipline;

// Generated by Selenium IDE
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.Before;
import org.junit.After;
import static org.junit.Assert.*;
import static org.hamcrest.CoreMatchers.is;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.edge.EdgeDriver;
import org.openqa.selenium.ie.InternetExplorerDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.ui.Select;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Keys;

import io.github.bonigarcia.wdm.WebDriverManager;

import java.util.*;

// example usage:  mvn clean test -Dbrowser="firefox"

@RunWith(TestRunner.class)
public class SimpleFWUpdateTest {
  public static WebDriver driver;
  private Map<String, Object> vars;
  JavascriptExecutor js;

  String machine;
  String device;
  String browser;

  @Before
  public void setUp() {
    machine = System.getProperty("machine");
    if (machine == null)
      machine = System.getenv("machine");
    device = System.getProperty("dev");
    if (device == null)
      device = System.getenv("dev");
    browser = System.getProperty("browser");

    // WebDriverManager.operadriver().setup();
    // WebDriverManager.phantomjs().setup();

    if (browser == null)
      browser = System.getenv("browser");
    if (browser != null) {
      if (browser.equals("chrome")) {
        WebDriverManager.chromedriver().setup();
        driver = new ChromeDriver();
      } else if (browser.equals("firefox")) {
        WebDriverManager.firefoxdriver().setup();
        driver = new FirefoxDriver();
      } else if (browser.equals("internet explorer")) {
        WebDriverManager.iedriver().setup();
        driver = new InternetExplorerDriver();
      } else if (browser.equals("MicrosoftEdge")) {
        WebDriverManager.edgedriver().setup();
        driver = new EdgeDriver();
      }
      js = (JavascriptExecutor) driver;
      vars = new HashMap<String, Object>();
    }
  }

  @After
  public void tearDown() {
    if (driver != null)
      driver.quit();
  }

  @Test
  public void testSimpleFWUpdate() {
    if (driver != null) {
      // Test name: Simple FW Update
      // Step # | name | target | value | comment
      // 1 | open | | / |
      driver.get("https://btu.bose.com/");
      // 2 | waitForElementVisible | css=#device_productoverview_container
      // .btu-product-update-name | 180000 |
      {
        WebDriverWait wait = new WebDriverWait(driver, 180);
        wait.until(ExpectedConditions
            .visibilityOfElementLocated(By.cssSelector("#device_productoverview_container .btu-product-update-name")));
      }
      // 3 | pause | 2000 | |
      try {
        Thread.sleep(2000);
      } catch (InterruptedException e) {
        e.printStackTrace();
      }

      WebElement device_updatenow = driver.findElement(By.id("device_updatenow"));
      if (!device_updatenow.isDisplayed()) {
        // 4 | sendKeys | xpath=//body | a |
        driver.findElement(By.xpath("//body")).sendKeys("a");
        // 5 | sendKeys | xpath=//body | d |
        driver.findElement(By.xpath("//body")).sendKeys("d");
        // 6 | sendKeys | xpath=//body | v |
        driver.findElement(By.xpath("//body")).sendKeys("v");
        // 7 | sendKeys | xpath=//body | ${KEY_UP} |
        driver.findElement(By.xpath("//body")).sendKeys(Keys.UP);
        // 8 | sendKeys | xpath=//body | ${KEY_DOWN} |
        driver.findElement(By.xpath("//body")).sendKeys(Keys.DOWN);
        // 9 | waitForElementVisible | id=device_updatenow | 20000 |
        {
          WebDriverWait wait = new WebDriverWait(driver, 20);
          wait.until(ExpectedConditions.visibilityOfElementLocated(By.id("device_updatenow")));
        }
        // 10 | pause | 2000 | |
        try {
          Thread.sleep(2000);
        } catch (InterruptedException e) {
          e.printStackTrace();
        }

        WebElement device_targetfirmware = driver.findElement(By.id("device_targetfirmware"));
        Select dropdown = new Select(device_targetfirmware);
        dropdown.selectByIndex(1);
      }

      // 11 | click | id=device_updatenow | |
      driver.findElement(By.id("device_updatenow")).click();
      // 12 | assertElementPresent | id=device_updating | |
      {
        List<WebElement> elements = driver.findElements(By.id("device_updating"));
        assert (elements.size() > 0);
      }
      // 13 | assertElementPresent | id=device_update_progress | |
      {
        List<WebElement> elements = driver.findElements(By.id("device_update_progress"));
        assert (elements.size() > 0);
      }
      // 14 | assertElementPresent | css=#device_updatestatus >
      // #device_updateavailable | |
      {
        List<WebElement> elements = driver
            .findElements(By.cssSelector("#device_updatestatus > #device_updateavailable"));
        assert (elements.size() > 0);
      }
      // 15 | assertElementPresent | id=device_update_instructions | |
      {
        List<WebElement> elements = driver.findElements(By.id("device_update_instructions"));
        assert (elements.size() > 0);
      }
      // 16 | waitForElementVisible | id=device_updatecompletesuccess | 1800000 |
      {
        WebDriverWait wait = new WebDriverWait(driver, 1800);
        wait.until(ExpectedConditions.or(ExpectedConditions.visibilityOfElementLocated(By.id("errorbox_content")),
            ExpectedConditions.visibilityOfElementLocated(By.id("device_updatecompletesuccess")),
            ExpectedConditions.visibilityOfElementLocated(By.id("device_updatenow"))));
      }
      // 17 | verifyText | id=device_update_progress | 100% |
      if (driver.findElement(By.id("errorbox_content")).isDisplayed()) {
        fail("Error message is displayed");
      } else if (driver.findElement(By.id("device_updatecompletesuccess")).isDisplayed()) {
        assertThat(driver.findElement(By.id("device_update_progress")).getText(), is("100%"));
      } else {
        assertTrue(driver.findElement(By.id("device_updatenow")).isDisplayed());
      }

      System.out.println("Done Testing - machine:" + machine + " - device:" + device + " - browser:" + browser);
    }
  }
}
